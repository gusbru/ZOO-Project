# create k8s configmap for the deployment process
apiVersion: v1
kind: ConfigMap
metadata:
  name: deployment-configmap
data:
  DeploymentProcess.py: |+
    #
    import sys
    import json
    import yaml
    # import re
    # from cwl_utils.parser import load_document as load_cwl
    # from cwl_utils.parser import *

    class Process:
        def __init__(
            self,
            identifier,
            version,
            title=None,
            description=None,
            store_supported=True,
            status_supported=True,
            service_type=None,
            service_provider=None,
        ):
            self.identifier = identifier
            self.version = version
            self.title = title or identifier
            if self.title:
                self.title = str(self.title)
            self.description = description or title
            if self.description:
                self.description = str(self.description)
            self.store_supported = store_supported
            self.status_supported = status_supported
            self.service_type = service_type
            self.service_provider = service_provider
            self.version = version
            self.inputs = []
            self.outputs = []

        def write_zcfg(self, stream):
            """
            Writes the configuration file for the Zoo process (.zfcg) to a stream.
            """
            print("Writes the configuration file for the Zoo process (.zfcg) to a stream", file=sys.stderr)

            print("[{0}]".format(self.identifier), file=stream)
            if self.title:
                print("  Title = {0}".format(self.title), file=stream)
            if self.description:
                print("  Abstract = {0}".format(self.description), file=stream)
            if self.service_provider:
                print("  serviceType = {0}".format(self.service_type), file=stream)
                print("  serviceProvider = {0}".format(self.service_provider), file=stream)
            if self.version:
                print("  processVersion = {0}".format(self.version), file=stream)
            print(
                "  storeSupported = {0}".format(
                    "true" if self.store_supported else "false"
                ),
                file=stream,
            )
            print(
                "  statusSupported = {0}".format(
                    "true" if self.status_supported else "false"
                ),
                file=stream,
            )

            print("  <DataInputs>", file=stream)
            for input in self.inputs:
                print("    [{0}]".format(input.identifier), file=stream)
                print("      Title = {0}".format(input.title), file=stream)
                print("      Abstract = {0}".format(input.description), file=stream)
                print("      minOccurs = {0}".format(input.min_occurs), file=stream)
                print(
                    "      maxOccurs = {0}".format(
                        999 if input.max_occurs == 0 else input.max_occurs
                    ),
                    file=stream,
                )
                if input.is_complex:
                    pass
                else:
                    print("      <LiteralData>", file=stream)
                    print("        dataType = {0}".format(input.type), file=stream)
                    if input.possible_values:
                        print(
                            "        AllowedValues = {0}".format(
                                ",".join(input.possible_values)
                            ),
                            file=stream,
                        )
                    if input.default_value:
                        print("        <Default>", file=stream)
                        print(
                            "          value = {0}".format(input.default_value), file=stream
                        )
                        print("        </Default>", file=stream)
                    else:
                        print("        <Default/>", file=stream)
                    print("      </LiteralData>", file=stream)
            print("  </DataInputs>", file=stream)

            print("  <DataOutputs>", file=stream)
            for output in self.outputs:
                print("    [{0}]".format(output.identifier), file=stream)
                print("      Title = {0}".format(output.title), file=stream)
                print("      Abstract = {0}".format(output.description), file=stream)
                if output.is_complex:
                    print("      <ComplexData>", file=stream)
                    print("        <Default>", file=stream)
                    print(
                        "          mimeType = {0}".format(
                            output.file_content_type
                            if output.file_content_type
                            else "text/plain"
                        ),
                        file=stream,
                    )
                    print("        </Default>", file=stream)
                    print("      </ComplexData>", file=stream)
                else:
                    print("      <LiteralData>", file=stream)
                    print("        dataType = {0}".format(input.type), file=stream)
                    print("        <Default/>", file=stream)
                    print("      </LiteralData>", file=stream)
            print("  </DataOutputs>", file=stream)

        def run_sql(self, conf):
            """
            Store the metadata informations in the ZOO-Project database
            """
            print("Store the metadata informations in the ZOO-Project database", file=sys.stderr)
            import psycopg2
            import psycopg2.extensions
            psycopg2.extensions.register_type(psycopg2.extensions.UNICODE)
            if "auth_env" in conf:
                self.user=conf["auth_env"]["user"]
            else:
                self.user="anonymous"
            conn = psycopg2.connect("host=%s port=%s dbname=%s user=%s password=%s" % (conf["metadb"]["host"], conf["metadb"]["port"], conf["metadb"]["dbname"], conf["metadb"]["user"], conf["metadb"]["password"]))
            cur = conn.cursor()
            if "orequest_method" in conf["lenv"]:
                cur.execute("DELETE FROM collectiondb.ows_process WHERE identifier=$q$%s$q$ and user_id=(select id from public.users where name=$q$%s$q$)" % (self.identifier,self.user))
            conn.commit()
            cur.execute("SELECT id FROM collectiondb.ows_process WHERE identifier=$q$%s$q$ and user_id=(select id from public.users where name=$q$%s$q$)" % (self.identifier,self.user))
            vals = cur.fetchone()
            if vals is not None:
                conn.close()
                return False
            conn.commit()
            cur.execute(("INSERT INTO CollectionDB.zoo_DeploymentMetadata"+
                    "(executable_name,service_type_id)"+
                    " VALUES "+
                    " ($q${0}$q$,"+
                    "(SELECT id from CollectionDB.zoo_ServiceTypes WHERE service_type=$q${1}$q$));")
                    .format(self.service_provider,self.service_type))
            cur.execute("INSERT INTO CollectionDB.zoo_PrivateMetadata(id) VALUES (default);")
            cur.execute("INSERT INTO CollectionDB.PrivateMetadataDeploymentMetadataAssignment(private_metadata_id,deployment_metadata_id) VALUES"+
                    "((SELECT last_value FROM CollectionDB.zoo_PrivateMetadata_id_seq),"+
                    "(SELECT last_value FROM CollectionDB.zoo_DeploymentMetadata_id_seq));")
            try:
                cur.execute("SELECT id from public.users WHERE name = $q${0}$q$".format(self.user))
                if cur.fetchone() is None:
                    cur.execute("INSERT INTO public.users (name) VALUES ($q${0}$q$)".format(self.user))
            except Exception as e:
                print(e,file=sys.stderr)
                cur.commit()
            cur.execute(("INSERT INTO CollectionDB.ows_Process"+
                    "(identifier,title,abstract,version,user_id,private_metadata_id,mutable,availability)"+
                    "VALUES"+
                    "($q${0}$q$,"+
                    "$q${1}$q$,"+
                    "$q${2}$q$,"+
                    "$q${3}$q$,"+
                    "(select id from public.users where name=$q${4}$q$),"+
                    "(SELECT last_value FROM CollectionDB.PrivateMetadataDeploymentMetadataAssignment_id_seq),"+
                    "true,true);").format(self.identifier,self.title,self.description,self.version,self.user))
            cur.execute("CREATE TEMPORARY TABLE pid AS (select last_value as id from CollectionDB.Descriptions_id_seq);")
            # Inputs treatment
            for input in self.inputs:
                if input.is_complex:
                    pass
                else:
                    cur.execute("INSERT INTO CollectionDB.LiteralDataDomain (def,data_type_id) VALUES "+
                            "(true,(SELECT id from CollectionDB.PrimitiveDatatypes where name = $q${0}$q$));".format(input.type))
                    if input.possible_values:
                        for i in range(len(input.possible_values)):
                            cur.execute("INSERT INTO CollectionDB.AllowedValues (allowed_value) VALUES ($q${0}$q$);".format(input.possible_values[i]))
                            cur.execute("INSERT INTO CollectionDB.AllowedValuesAssignment (literal_data_domain_id,allowed_value_id) VALUES ("+
                                            "(select last_value as id from CollectionDB.LiteralDataDomain_id_seq)"+
                                            "(select last_value as id from CollectionDB.AllowedValues_id_seq)"
                                            ");")
                    if input.default_value:
                        cur.execute("UPDATE CollectionDB.LiteralDataDomain"+
                                        " set default_value = $q${0}$q$ ".format(input.default_value)+
                                        " WHERE id = "+
                                        "  ((SELECT last_value FROM CollectionDB.ows_DataDescription_id_seq));")

                cur.execute(("INSERT INTO CollectionDB.ows_Input (identifier,title,abstract,min_occurs,max_occurs) VALUES "+
                        "($q${0}$q$,"+
                        "$q${1}$q$,"+
                        "$q${2}$q$,"+
                        "{3},"+
                        "{4});").format(input.identifier,
                                            input.title,
                                            input.description,
                                            input.min_occurs,
                                            999 if input.max_occurs == 0 else input.max_occurs))
                cur.execute("INSERT INTO CollectionDB.InputDataDescriptionAssignment (input_id,data_description_id) VALUES ((select last_value as id from CollectionDB.Descriptions_id_seq),(select last_value from CollectionDB.ows_DataDescription_id_seq));");
                cur.execute("INSERT INTO CollectionDB.ProcessInputAssignment(process_id,input_id) VALUES((select id from pid),(select last_value as id from CollectionDB.Descriptions_id_seq));")
            # Output treatment
            for output in self.outputs:
                if output.is_complex:
                    cur.execute("INSERT INTO CollectionDB.ows_Format (def,primitive_format_id) VALUES "+
                            "(true,(SELECT id from CollectionDB.PrimitiveFormats WHERE mime_type='{0}' LIMIT 1));".format(
                                output.file_content_type
                                if output.file_content_type
                                else "text/plain"
                                ))
                else:
                    pass
                cur.execute("INSERT INTO CollectionDB.ows_DataDescription (format_id) VALUES ((SELECT last_value FROM CollectionDB.ows_Format_id_seq));")
                cur.execute("INSERT INTO CollectionDB.ows_Output"+
                        "(identifier,title,abstract)"+
                        " VALUES "+
                        "($q${0}$q$,$q${1}$q$,$q${2}$q$);".format(output.identifier,output.title,output.description))
                cur.execute("INSERT INTO CollectionDB.OutputDataDescriptionAssignment (output_id,data_description_id) VALUES ((select last_value as id from CollectionDB.Descriptions_id_seq),(select last_value from CollectionDB.ows_DataDescription_id_seq));")
                cur.execute("INSERT INTO CollectionDB.ProcessOutputAssignment(process_id,output_id) VALUES((select id from pid),(select last_value as id from CollectionDB.Descriptions_id_seq));")
            cur.execute("DROP TABLE pid;")
            conn.commit()
            conn.close()
            return True

        def write_ogc_api_json(self, stream):
            print("Writes the OGC API JSON to a stream", file=sys.stderr)
            ogc = self.get_ogc_api_json()
            print(json.dumps(ogc, indent=2), file=stream)

        def write_ogc_api_yaml(self, stream):
            print("Writes the OGC API YAML to a stream", file=sys.stderr)
            ogc = self.get_ogc_api_json()
            print(yaml.dump(ogc), file=stream)

        def get_ogc_api_json(self):
            print("Gets the OGC API JSON", file=sys.stderr)
            ogc = {
                "id": self.identifier,
                "version": self.version,
                "title": self.title,
                "description": self.description,
                "jobControlOptions": [],
                "outputTransmission": [],
                "links": [],
                "inputs": {},
                "outputs": {},
            }

            for input in self.inputs:
                ogc_input_schema = {"type": input.type}
                if input.min_occurs == 0:
                    ogc_input_schema["nullable"] = True
                elif input.max_occurs != 1:
                    ogc_input_schema["minItems"] = input.min_occurs
                if input.max_occurs != 1:
                    ogc_input_schema["type"] = "array"
                    ogc_input_schema["maxItems"] = (
                        input.max_occurs if input.max_occurs > 1 else 100
                    )
                    ogc_input_schema["items"] = {"type": input.type}
                if input.possible_values:
                    ogc_input_schema["enum"] = input.possible_values.copy()
                if input.default_value:
                    ogc_input_schema["default"] = input.default_value
                if input.is_file:
                    ogc_input_schema["contentMediaType"] = input.file_content_type()
                elif input.is_directory:
                    ogc_input_schema["contentMediaType"] = input.file_content_type()

                ogc_input = {
                    "title": input.title,
                    "description": input.description,
                    "schema": ogc_input_schema,
                }

                if input.is_complex:
                    pass  # TODO
                else:
                    ogc["inputs"][input.identifier] = ogc_input

            for output in self.outputs:
                ogc_output_schema = {"type": output.type}

                ogc_output = {
                    "title": output.title,
                    "description": output.description,
                    "schema": ogc_output_schema,
                }

                if output.is_complex:
                    pass  # TODO
                else:
                    ogc["outputs"][output.identifier] = ogc_output
            return ogc


    #
    # Author : Blasco Brauzzi, Fabrice Brito, Frank Löschau
    #
    # Copyright 2023 Terradue. All rights reserved.
    #
    # Permission is hereby granted, free of charge, to any person obtaining a
    # copy of this software and associated documentation files (the
    # "Software"), to deal in the Software without restriction, including with
    # out limitation the rights to use, copy, modify, merge, publish,
    # distribute, sublicense, and/or sell copies of the Software, and to
    # permit persons to whom the Software is furnished to do so, subject to
    # the following conditions:
    #
    # The above copyright notice and this permission notice shall be included
    # in all copies or substantial portions of the Software.
    #
    # THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    # OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    # MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    # IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    # CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    # TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    # SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    #

    import os

    try:
        import zoo
    except ImportError:
        print("Not running in zoo instance, using ZooStub object for testing")

        class ZooStub(object):
            def __init__(self):
                self.SERVICE_SUCCEEDED = 3
                self.SERVICE_FAILED = 4
                self.SERVICE_DEPLOYED = 6

            def update_status(self, conf, progress):
                print(f"Status {progress}")

            def _(self, message):
                print(f"invoked _ with {message}")

        conf = {}
        conf["lenv"] = {"message": ""}
        zoo = ZooStub()
        pass

    from cookiecutter.main import cookiecutter
    import sys
    import shutil
    import json
    from pathlib import Path
    import sys
    # from deploy_util import Process
    import yaml
    import requests
    import botocore
    from urllib.parse import urlparse
    from collections import namedtuple
    import os


    def get_s3_settings():
        # you can extend this method to get the S3 credentials 
        return namedtuple(
            "S3Settings",
            ["region_name", "endpoint_url", "aws_access_key_id", "aws_secret_access_key"],
            defaults=[
                os.getenv("S3_REGION"),
                os.getenv("SERVICE_URL"),
                os.getenv("S3_ACCESS_KEY"),
                os.getenv("S3_SECRET_KEY"),
            ],
        )


    class DeployService(object):
        def __init__(self, conf, inputs, outputs):
            print("Starting DeployService", file=sys.stderr)
            self.conf = conf
            self.inputs = inputs
            self.outputs = outputs

            self.zooservices_folder = self.get_zoo_services_folder()
            print(f"zooservices_folder = {self.zooservices_folder}", file=sys.stderr)

            # print("Skipping cookiecutter", file=sys.stderr)
            self.cookiecutter_configuration_file = self._get_conf_value(
                key="configurationFile", section="cookiecutter"
            )
            self.cookiecutter_templates_folder = self._get_conf_value(
                key="templatesPath", section="cookiecutter"
            )
            self.cookiecutter_template_url = self._get_conf_value(
                key="templateUrl", section="cookiecutter"
            )

            self.cookiecutter_template_branch = self._get_conf_value_if_exists(
                key="templateBranch", section="cookiecutter"
            )

            self.tmp_folder = self._get_conf_value("tmpPath")
            print(f"tmp_folder = {self.tmp_folder}", file=sys.stderr)

            self.process_id = self.conf["lenv"]["usid"]
            print(f"process_id = {self.process_id}", file=sys.stderr)

            self.service_tmp_folder = self.create_service_tmp_folder()
            print(f"service_tmp_folder = {self.service_tmp_folder}", file=sys.stderr)

            self.cwl_content = self.get_application_package()

            if "workflow_id" in self.conf["lenv"]:
                print(f"workflow_id from conf.lenv = {self.conf['lenv']['workflow_id']}", file=sys.stderr)
                # self.service_configuration = Process.create_from_cwl(self.cwl_content,self.conf["lenv"]["workflow_id"])
                self.service_configuration = Process(
                    identifier=self.conf['lenv']['workflow_id'],
                    version="1.2.3",
                    title="This is an awesome workflow",
                    description="To use google it",
                )
            else:
                print("No workflow_id in conf.lenv", file=sys.stderr)
                # self.service_configuration = Process.create_from_cwl(self.cwl_content)
                self.service_configuration = Process(
                    identifier="custom5",
                    version="1.2.3",
                    title="This is an awesome workflow",
                    description="To use google it",
                )
            
            print("service_configuration created", file=sys.stderr)

            self.service_configuration.service_provider = (
                f"{self.service_configuration.identifier}.service"
            )
            self.service_configuration.service_type = "Python"

            self.conf["lenv"]["workflow_id"] = self.service_configuration.identifier
            self.conf["lenv"]["service_name"] = self.service_configuration.identifier

            print("DeployService initialization finished", file=sys.stderr)

        def get_zoo_services_folder(self):

            # checking for namespace
            if "zooServicesNamespace" in self.conf and \
                    "namespace" in self.conf["zooServicesNamespace"] and \
                    "servicesNamespace" in self.conf and \
                    "path" in self.conf["servicesNamespace"]:
                zooservices_folder = os.path.join(self.conf["servicesNamespace"]["path"],
                                                self.conf["zooServicesNamespace"]["namespace"])
            else:
            # if no namespace is used, we will use the default services path
                print(self.conf["renv"], file=sys.stderr)
                zooservices_folder = self._get_conf_value(
                    key="CONTEXT_DOCUMENT_ROOT", section="renv"
                )

            # Checking if zoo can write in the servicePath
            self.check_write_permissions(zooservices_folder)

            return zooservices_folder

        def _get_conf_value(self, key, section="main"):

            print(section, file=sys.stderr)
            if key in self.conf[section].keys():
                return self.conf[section][key]
            else:
                raise ValueError(f"{key} not set, check configuration")

        def _get_conf_value_if_exists(self, key, section="main"):

            print(section, file=sys.stderr)
            if key in self.conf[section].keys():
                return self.conf[section][key]
            else:
                return None

        @staticmethod
        def check_write_permissions(folder):
            if not os.access(folder, os.W_OK):
                errorMsg = f"Cannot write to {folder}. Please check folder"
                print(errorMsg, file=sys.stderr)
                raise Exception(errorMsg)

        def create_service_tmp_folder(self):
            # creating the folder where we will download the applicationPackage
            tmp_path = os.path.join(self.tmp_folder, f"DeployProcess-{self.process_id}")
            print(f"creating the folder where we will download the applicationPackage {tmp_path}", file=sys.stderr)        
            try:
                os.makedirs(tmp_path)
            except Exception as e:
                print(e,file=sys.stderr)

            return tmp_path

        def get_application_package(self):

            # checking if applicationPackage exists
            if "applicationPackage" not in self.inputs.keys():
                raise ValueError("The inputs dot not include applicationPackage")

            # loading cwl in yaml object
            print("loading input payload in yaml object",file=sys.stderr)
            # if "cache_file" in self.inputs["applicationPackage"]:
            #     cwl_content = yaml.safe_load(open(self.inputs["applicationPackage"]["cache_file"]).read())
            # else:
            #     cwl_content = yaml.safe_load(self.inputs["applicationPackage"]["value"])
            payload = yaml.safe_load(self.inputs["applicationPackage"]["value"])

            print("Done loading input payload in yaml object",file=sys.stderr)

            return payload

        def generate_service(self):

            print("start generating service",file=sys.stderr)
            path=None
            print(f"self.conf.lenv = {self.conf['lenv']}",file=sys.stderr)
            
            if "noRunSql" in self.conf["lenv"]:
                print(f"noRunSql = {self.conf['lenv']['noRunSql']}",file=sys.stderr)
                
                print("cookiecutter generation",file=sys.stderr)
                # if False:
                # checking if the template location is remote or local
                if self.cookiecutter_template_url.endswith(".git"):

                    template_folder = os.path.join(
                        self.cookiecutter_templates_folder,
                        Path(self.cookiecutter_template_url).stem,
                    )
                    print(f"cookiecutter template_folder = {template_folder}",file=sys.stderr)

                    # checking if template had already been cloned
                    if os.path.isdir(template_folder):
                        print("template had already been cloned. Deleting it",file=sys.stderr)
                        shutil.rmtree(template_folder)

                    # retrieving the branch to clone
                    # if no branch is specified, we will clone the master branch
                    cookiecutter_template_branch = self.cookiecutter_template_branch
                    print(f"cookiecutter_template_branch = {cookiecutter_template_branch}",file=sys.stderr)

                    # cloning the template
                    if cookiecutter_template_branch is not None:
                        print(f"git clone -b {cookiecutter_template_branch} {self.cookiecutter_template_url} {template_folder}",file=sys.stderr)
                        os.system(
                            f"git clone -b {cookiecutter_template_branch} {self.cookiecutter_template_url} {template_folder}"
                        )
                    else:
                        print(f"git clone {self.cookiecutter_template_url} {template_folder}",file=sys.stderr)
                        os.system(f"git clone {self.cookiecutter_template_url} {template_folder}")

                else:
                    raise ValueError(
                        f"{self.cookiecutter_template_url} is not a valid git repo"
                    )

                cookiecutter_values = {"service_name": self.service_configuration.identifier,
                                    "workflow_id": self.service_configuration.identifier,
                                    "conf": self.conf["cookiecutter"]}
                
                print(f"cookiecutter_values = {cookiecutter_values}",file=sys.stderr)

                # Create project from template
                print("Create project from template",file=sys.stderr)
                path = cookiecutter(
                    template_folder,
                    extra_context=cookiecutter_values,
                    output_dir=self.service_tmp_folder,
                    no_input=True,
                    overwrite_if_exists=True,
                    config_file=self.cookiecutter_configuration_file
                )

            if "metadb" not in self.conf:
                print("writing zcfg",file=sys.stderr)
                zcfg_file = os.path.join(
                    self.zooservices_folder, f"{self.service_configuration.identifier}.zcfg"
                )
                with open(zcfg_file, "w") as file:
                    self.service_configuration.write_zcfg(file)

            # checking if service had already been deployed previously
            # if yes, delete it before redeploy the new one
            print("checking if service had already been deployed previously",file=sys.stderr)
            old_service = os.path.join(self.zooservices_folder,self.service_configuration.identifier)
            if os.path.isdir(old_service):
                print("service had already been deployed previously",file=sys.stderr)
                shutil.rmtree(old_service)
                if "metadb" not in self.conf:
                    os.remove(zcfg_file)

            if "metadb" in self.conf and not("noRunSql" in self.conf["lenv"] and self.conf["lenv"]["noRunSql"] != "false"):
                print("running sql",file=sys.stderr)
                rSql=self.service_configuration.run_sql(self.conf)
                if not(rSql):
                    return False

            print(f"path = {path}",file=sys.stderr)
            if path is not None:
                print(f"path is not None: {path}",file=sys.stderr)
                app_package_file = os.path.join(
                    path,
                    f"app-package.cwl",
                )

                print(f"open app_package_file = {app_package_file}",file=sys.stderr)
                with open(app_package_file, "w") as file:
                    yaml.dump(self.cwl_content, file)

                print(f"move {path} to {self.zooservices_folder}",file=sys.stderr)
                shutil.move(path, self.zooservices_folder)

                print(f"cleanup tmp folder {self.service_tmp_folder}",file=sys.stderr)
                shutil.rmtree(self.service_tmp_folder)

            print("service generated",file=sys.stderr)
            self.conf["lenv"]["deployedServiceId"] = self.service_configuration.identifier

            return True

    def duplicateMessage(conf,deploy_process):
        sLocation=conf["openapi"]["rootUrl"]+"/processes/"+deploy_process.service_configuration.identifier
        if "headers" in conf:
            conf["headers"]["Location"]=sLocation
        else:
            conf["headers"]={"Location": sLocation }
        conf["lenv"]["code"]="DuplicatedProcess"
        conf["lenv"]["message"]=zoo._("A service with the same identifier is already deployed")
        return zoo.SERVICE_FAILED

    def DeployProcess(conf, inputs, outputs):
        try:
            print(f"conf = {json.dumps(conf, indent=4)}", file=sys.stderr)
            print(f"inputs = {json.dumps(inputs, indent=4)}", file=sys.stderr)
            print(f"outputs = {json.dumps(outputs, indent=4)}", file=sys.stderr)
            
            if "applicationPackage" in inputs.keys() and "isArray" in inputs["applicationPackage"].keys() and inputs["applicationPackage"]["isArray"]=="true":
                for i in range(int(inputs["applicationPackage"]["length"])):
                    lInputs = {"applicationPackage": {"value": inputs["applicationPackage"]["value"][i]}}
                    lInputs["applicationPackage"]["mimeType"] = inputs["applicationPackage"]["mimeType"][i]
                    deploy_process = DeployService(conf, lInputs, outputs)
                    print(f"Generate service {i}", file=sys.stderr)
                    res=deploy_process.generate_service()
                    if not(res):
                        return duplicateMessage(conf,deploy_process)
            else:
                deploy_process = DeployService(conf, inputs, outputs)
                res=deploy_process.generate_service()
                if not(res):
                    return duplicateMessage(conf,deploy_process)
            
            conf["lenv"]["deployedServiceId"] = deploy_process.service_configuration.identifier
            print(f"deployedServiceId = {deploy_process.service_configuration.identifier}", file=sys.stderr)
            response_json = {
                "message": "Service successfully deployed.",
                "service": deploy_process.service_configuration.identifier,
                "status": "success"
            }
            print(f"response_json = {json.dumps(response_json, indent=4)}", file=sys.stderr)
            outputs["Result"]["value"] = json.dumps(response_json)
            return zoo.SERVICE_DEPLOYED
        except Exception as e:
            print("Exception in Python service",file=sys.stderr)
            print(e,file=sys.stderr)
            conf["lenv"]["message"]=str(e)
            return zoo.SERVICE_FAILED
